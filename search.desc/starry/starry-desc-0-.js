searchState.loadedDescShard("starry", 0, "StarryOS\nLoader for loading apps.\nMacro to generate syscall body\nThe size of the kernel stack.\nThe base address of the user space.\nThe size of the user space.\nThe size of the user stack.\nThe highest address of the user stack.\nThe information of a given ELF file\nThe segment of the elf file, which is used to map the elf …\nThe auxiliary vectors of the ELF file\nThe data of the segment\nThe entry point of the ELF file\nThe flags of the segment which is used to set the page …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the number of apps.\nGet the data of an app by a given app ID.\nGet the data of an app by the given app name.\nGet the name of an app by a given app ID.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList all apps.\nLoad the ELF files by the given app name and return the …\nThe offset of the segment relative to the start of the page\nThe segments of the ELF file\nThe size of the segment\nThe start virtual address of the segment\nLoad a user app.\nThe ioctl() system call manipulates the underlying device …\nDon’t use a file.\nMap address must be exactly as requested, no matter …\nDon’t check for reservations.\nChanges private; copy pages on write.\nShare changes\nAllocation is for a stack.\nflags for sys_mmap\npermissions for sys_mmap\nPage can be executed.\nPage can be read.\nPage can be written.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nARCH_PRCTL codes\nThe setting of the flag manipulated by ARCH_SET_CPUID\nGet the FS segment base\nGet the GS segment base\nEnable (addr != 0) or disable (addr == 0) the cpuid …\nSet the FS segment base\nSet the GS segment base\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTo set the clear_child_tid field in the task extended data.\nTask extended data for the monolithic kernel.\nThe virtual memory address space.\nThe clear thread tid field\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe process ID.\nThe user space context.")